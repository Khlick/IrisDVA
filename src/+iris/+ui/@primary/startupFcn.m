function startupFcn(obj)
import iris.app.*;

w = obj.window;

obj.bindUI();
obj.populateModules();

pause(1);

%% Setup Tags for inputs
obj.LUT = containers.Map();
%[~,epochTicker] = mlapptools.getWebElements(obj.CurrentEpochTicker);
%obj.LUT(epochTicker.ID_val) = 'CurrentEpochTicker';
%[~,ovlpTicker] = mlapptools.getWebElements(obj.OverlapTicker);
%obj.LUT(ovlpTicker.ID_val) = 'OverlapTicker';


obj.toggleDataDependentUI('off');
%drawnow();
pause(0.01);
% add the classes to the elements
iter = 0;
while true
  try
    mlapptools.addClasses(obj.SwitchPanel, ...
      {'metal','mild-round','border-grad-inv','transparent-panel-85'} ...
      );
    mlapptools.addClasses(obj.PlotControlTools, ...
      {'asym-panel', 'border-grad'} ...
      );
    mlapptools.addClasses(obj.CurrentInfo, ...
      {'asym-panel', 'border-grad'} ...
      );
    mlapptools.addClasses(obj.ExtendedInfo, ...
      {'light-hash', 'border-grad-inv'} ...
      );
    mlapptools.addClasses(obj.AxesPanel, ...
      {'mild-round','border-grad'} ...
      );
    mlapptools.addClasses(obj.StartPanel, ...
      {'mild-round','border-grad'} ...
      );
    mlapptools.addClasses(obj.AxesPanel.Parent, ...
      'iris-grad' ...
      );
  catch x
    %log this
    iter = iter+1;
    if iter > 20, rethrow(x); end
    pause(0.2);
    continue
  end
  break;
end

% Add CSS to obj.container head
containerScripts = scriptRead(...
  strcat( ...
    fullfile(Info.getResourcePath,'scripts/'), ...
    sprintfc('IrisStyles_%d.css', 0:2) ...
  ), ...
  false, false, '''' ...
  );
containerText = sprintf('mystyle.innerHTML = `%s`;', ...
  cat(2,containerScripts{:}) ...
  );
i = 0;
pause(0.21);
w.executeJS('var mystyle;');
w.executeJS(...
  ['mystyle = document.createElement(''style'');', ...
  'document.head.appendChild(mystyle);' ...
  ] ...
  );
while true
  try
    w.executeJS(containerText);
  catch x
    %log this
    fprintf(x.message);
    i = i+1;
    if i > 20, rethrow(x); end
    pause(0.2);
    continue
  end
  break;
end

% Run JS libs
JSScripts = strcat( ...
    fullfile(Info.getResourcePath,'scripts/'), ...
    sprintfc('IrisImports_%d.js', 0:2) ...
  );
for fi = 1:length(JSScripts)
  obj.executeJSFile(JSScripts{fi});
end

%% Keyboard
v = ver('matlab');
if str2double(v.Version) < 9.5

  iris.app.Info.showWarning( ...
    ['Keyboard functionality requires MATLAB',char(hex2dec('00a9')),'9.5.'] ...
    );
end
%% Add the listener for the selection
addlistener(obj,'selection', 'PostSet',@(s,e)obj.onSelectionUpdate);

%% Tooltips

objects = { ...
  'ScaleSwitch','BaselineSwitch','FilterSwitch','EpochSwitch','StatsSwitch', ...
  'ViewNotesButton','ExtendedInfoButton','CurrentEpochDecSmall', ...
  'CurrentEpochIncSmall','OverlapInc','OverlapDec', ...
  'CurrentEpochIncBig','CurrentEpochDecBig' ...
  };
directions = [{'up';'up';'up';'left';'right'};rep({'up'},length(objects)-5)];
for o = 1:length(objects)
  try
    tip = Aes.strLib(objects{o});
    addTooltip(obj.(objects{o}), tip, directions{o});
    pause(0.1);
  catch
    %%% log this
  end
end

buttons = { ...
  'ViewNotesButton','ExtendedInfoButton','CurrentEpochDecSmall', ...
  'CurrentEpochIncSmall','OverlapInc','OverlapDec', ...
  'CurrentEpochIncBig','CurrentEpochDecBig' ...
  };

bTipDirs = rep({'up'},length(buttons));

%% Set overflows to allow tooltips to display correctly
if ~strcmpi(w.executeJS('typeof makeVisible !== ''undefined'' '),'true')
  % makeVisible function does not exist, let's add it
  w.executeJS( ...
    [ ...
      'const makeVisible = function(nodeID, recurse=true) {', ...
        'dojo.setStyle(nodeID, "overflow", "visible");', ...
        'if(recurse) {', ...
        '  let children = nodeID.getElementsByTagName("*");', ...
        '  let arr = [ ...children];', ...
        '  arr.forEach( (ch) => makeVisible(ch,recurse=true) );', ...
        '}', ...
      '}' ...
    ] ...
    );
end
% get the ID of the switch panel
[~,elemID] = mlapptools.getWebElements(obj.SwitchPanel);
elemNodeString = sprintf( ...
  'dojo.query("[%s = ''%s'']")[0]', ...
  elemID.ID_attr,elemID.ID_val ...
  );
    
w.executeJS( ...
  sprintf('makeVisible(%s,recurse=true);', ...
    elemNodeString ...
    ) ...
  );
pause(0.01);
% PlotControlTools
[~,elemID] = mlapptools.getWebElements(obj.PlotControlTools);
elemNodeString = sprintf( ...
  'dojo.query("[%s = ''%s'']")[0]', ...
  elemID.ID_attr,elemID.ID_val ...
  );
    
w.executeJS( ...
  sprintf('makeVisible(%s,recurse=true);', ...
    elemNodeString ...
    ) ...
  );
%drawnow(); pause(0.01);
%% Cleanup

end

