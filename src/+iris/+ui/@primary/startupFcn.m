function startupFcn(obj)
import iris.app.*;
obj.toggleDataDependentUI('off');
pause(0.25);
% add the classes to the elements
iter = 0;
while true
  try
    mlapptools.addClasses(obj.SwitchPanel, ...
      {'metal','mild-round','border-grad-inv','transparent-panel-85'} ...
      );
    mlapptools.addClasses(obj.PlotControlTools, ...
      {'asym-panel', 'border-grad'} ...
      );
    mlapptools.addClasses(obj.CurrentInfo, ...
      {'asym-panel', 'border-grad'} ...
      );
    mlapptools.addClasses(obj.ExtendedInfo, ...
      {'light-hash', 'border-grad-inv'} ...
      );
    mlapptools.addClasses(obj.AxesPanel, ...
      {'mild-round','border-grad'} ...
      );
    mlapptools.addClasses(obj.StartPanel, ...
      {'mild-round','border-grad'} ...
      );
    mlapptools.addClasses(obj.AxesPanel.Parent, ...
      'iris-grad' ...
      );
  catch x
    %log this
    iter = iter+1;
    if iter > 20, rethrow(x); end
    pause(0.2);
    continue
  end
  break;
end
% Add CSS to obj.container head
containerScripts = scriptRead(...
  strcat( ...
    fullfile(Info.getResourcePath,'scripts/'), ...
    sprintfc('IrisStyles_%d.css', 0:2) ...
  ), ...
  false, false, '''' ...
  );
containerText = sprintf(...
  [...
    'mystyle = document.createElement(''style'');', ...
    'mystyle.innerHTML = `%s`;', ...
    'document.head.appendChild(mystyle);' ...
  ], ...
  cat(2,containerScripts{:}) ...
  );
i = 0;
pause(0.2);
obj.window.executeJS('var mystyle;');
while true
  try
    obj.window.executeJS(containerText);
  catch x
    %log this
    fprintf(x.message);
    i = i+1;
    if i > 20, rethrow(x); end
    pause(0.2);
    continue
  end
  break;
end

% Run JS libs
JSScripts = strcat( ...
    fullfile(Info.getResourcePath,'scripts/'), ...
    sprintfc('IrisImports_%d.js', 0:2) ...
  );
for fi = 1:length(JSScripts)
  %fprintf('file: %s\n', JSScripts{fi});
  obj.executeJSFile(JSScripts{fi});
end

% Add the d3 axes
[~,panId] = mlapptools.getWebElements(obj.AxesPanel);
dojoStr = sprintf(...
  'parentNode = document.querySelector("[%s = ''%s'']");',...
  panId.ID_attr, panId.ID_val ...
  );

iter = 0;
while true
  try
    obj.window.executeJS('d3.version');
  catch x
    %log
    iter = iter+1;
    if iter > 20, rethrow(x); end
    pause(0.2);
    continue
  end
  break
end
obj.update();
obj.window.executeJS(dojoStr);
obj.window.executeJS(['var layout = {', ...
  '  "width": 1226,', ...
  '  "height": 717,', ...
  '  "yaxis": {', ...
  '    "title": "Y", ', ... 
  '    "zerolinecolor": "rgba(174, 174, 174,1)",', ...
  '    "zeroline": true,', ...
  '    "scale": "linear",', ...
  '    "grid": true', ...
  '  }, ', ...
  '  "titlefont": {', ...
  '    "family": "Times New Roman"', ...
  '  }, ', ...
  '  "xaxis": {', ...
  '    "title": "X", ', ...
  '    "zerolinecolor": "rgba(174, 174, 174,1)",', ...
  '    "zeroline": true,', ...
  '    "scale": "linear",', ...
  '    "grid": true', ...
  '  }, ', ...
  '  "font": {', ...
  '    "family": "Times New Roman", ', ...
  '    "size": 16', ...
  '  }, ', ...
  '  "margin": {', ...
  '    "r": 15, ', ...
  '    "b": 40, ', ...
  '    "l": 60, ', ...
  '    "t": 15', ...
  '  }', ...
  '}'] ...
  );
obj.window.executeJS(['var datArr = [', ...
  '    {', ...
  '      "line": {', ...
  '        "color":"rgb(50,135,200)",', ...
  '        "width":5,', ...
  '        "opacity":0.6,', ...
  '        "style": "dashed-dotted"', ...
  '      },', ...
  '      "marker": {', ...
  '        "symbol": "circle",', ...
  '        "opacity": 1,', ...
  '        "size": 12,', ...
  '        "color": "rgb(50,135,200)",', ...
  '      },', ...
  '      "name":"",', ...
  '      "mode":"none",', ...
  '      "x": [-1,1],', ...
  '      "y": [-1,1],', ...
  '    }', ...
  '  ]'] ...
  );
obj.window.executeJS('var ax = new IrisAxes(datArr,parentNode.lastChild,layout);');
obj.window.executeJS('ax.init();');
%% Keyboard
[~,bKey] = mlapptools.getWebElements(obj.KeyboardButton);
obj.window.executeJS( ...
  sprintf([ ...
    'var keyData;', ...
    'var button = document.querySelector("[%s = ''%s'']");', ...
    'document.addEventListener("keydown", (e) => {', ...
    'if ( ["Control","Alt","Meta","Shift"].indexOf(e.key) > -1 ) return;', ...
    'keyPressed(e).then((resolved) => {keyData = resolved;', ...
    'button.click();})', ...
    '});' ...
  ], ...
  bKey.ID_attr,bKey.ID_val));
%% Setup Tags for inputs
obj.LUT = containers.Map();
[~,epochTicker] = mlapptools.getWebElements(obj.CurrentEpochTicker);
obj.LUT(epochTicker.ID_val) = 'CurrentEpochTicker';
[~,ovlpTicker] = mlapptools.getWebElements(obj.OverlapTicker);
obj.LUT(ovlpTicker.ID_val) = 'OverlapTicker';
end

