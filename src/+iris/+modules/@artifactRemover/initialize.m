function initialize(app)
  app.isinit = true; % prevent editaxes update
  % only called on new data appended
  h = plot( ...
    app.Data.Filter('freq',app.setting_FilterBandwidth), ...
    'axes', app.ViewAxes, ...
    'devices', app.selectedDevice, ...
    'colorize',false, ...
    'interactive',false ...
    );
  set(h.Lines,'LineWidth',0.5);
  app.DataLines = h.Lines;
  
  % show only the selected datum
  app.updateDatum();
  % draw the ROIs
  roiW = app.roiWidth;
  lims = app.dataLimits.X.';
  app.ViewAxes.XLim = lims + [-1,1].*roiW;

  drawnow(); % to force update for limits below

  app.AnalysisROI = [                  ...
    patch(                                ...
    app.ViewAxes,                      ...
    (lims(ones(1,4))+[-1,-1,1,1].*roiW).', ...
    app.ViewAxes.YLim([1,2,2,1]).',    ...
    [0,0.1,0.6],                        ...
    FaceColor=      [0,0.1,0.6],        ...
    FaceAlpha=      app.ALPHA,         ...
    LineStyle=      'none',             ...
    Tag=            app.ROI_TAG(1)     ...
    );                                ...
    patch(                                ...
    app.ViewAxes,                      ...
    (lims(ones(1,4)+1)+[-1,-1,1,1].*roiW).', ...
    app.ViewAxes.YLim([1,2,2,1]).',    ...
    [0.6,0.1,0],                        ...
    FaceColor=      [0.6,0.1,0],        ...
    FaceAlpha=      app.ALPHA,         ...
    LineStyle=      'none',             ...
    Tag=            app.ROI_TAG(2)     ...
    )                                 ...
    ];
  arrayfun( ...
    @(roi)iptSetPointerBehavior(roi,app.ptMgr(roi,app)), ...
    app.AnalysisROI ...
    );
  app.StartSpinner.Limits = lims;
  app.StartSpinner.Value = lims(1);
  app.EndSpinner.Limits = lims;
  app.EndSpinner.Value = lims(2);
  app.isinit = false; % allow editaxes updates
  % update editaxes
  app.updateEditLine();
end
