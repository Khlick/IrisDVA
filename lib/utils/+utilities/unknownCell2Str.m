function [outputString,varargout] = unknownCell2Str(cellAr,sep,uniquify)
% UNKNOWNCELL2STR Convert a cell's contents to a string (char array)
if nargin < 3, uniquify = true; end
if nargin < 2, sep = ';'; end
caClass = cellfun(@class, cellAr, 'uniformoutput', false);
% loop through each cell and determine string representation
strRepresentation = cell(length(caClass),1);
for I = 1:length(caClass)
  % convert each element to a string
  switch caClass{I}
    case 'char'
      strNow = char(cellAr{I});
    case 'string'
      strNow = strjoin(cellAr{I}, ', ');
    case {'numeric','int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', ...
        'int64', 'uint64', 'double', 'single'}
      uAr = num2cell(cellAr{I});
      strNow = strjoin( ...
        cellfun( ...
          @(x) sprintf('%-.5g',x), ...
          uAr, ...
          'uniformoutput', false ...
          ), ...
        ', ' ...
        );
    case 'logical'
      tmpvec = {'false','true'};
      logStrings = cell(1,length(cellAr{I}));
      for ind = 1:length(cellAr{I})
        logStrings{ind} = tmpvec{double(cellAr{I}(ind))+1};
      end
      strNow = strjoin(logStrings, ',');
    case 'cell'
      [strNow,insideClass] = utilities.unknownCell2Str(cellAr{I},sep);
      caClass{I} = cat(2,caClass(I),insideClass{:});
    case 'struct'
      thisS = cellAr{I};
      nStructs = numel(thisS);
      
      fields = fieldnames(thisS);
      vals = struct2cell(thisS);
      
      [valStrings,insideClass] = arrayfun( ...
        @(e)utilities.unknownCell2Str(e,sep,false), ...
        vals, ...
        'UniformOutput', false ...
        );
      
      insideStrings = cellfun(@(c)strjoin(c,', '), insideClass, 'UniformOutput',false);
      insideClasses = cell(nStructs,1);
      for i = 1:nStructs
        insideClasses{i} = strjoin(squeeze(insideStrings(:,:,i)),',');
      end
      
      caClass{I} = cat(2, ...
        join(utilities.rep(caClass(I),nStructs),sep), ...
        join(insideClasses,'; ') ...
        );
      strNow = join(join([ ...
        utilities.rep(fields(:),nStructs,1,'dims',{[],1}), ...
        valStrings(:)],':',2),sep);
    case 'containers.Map'
      map = cellAr{I};
      nKeys = map.Count;
      fields = string(map.keys());
      vals = map.values();
      [valStrings,insideClasses] = arrayfun( ...
        @(e)utilities.unknownCell2Str(e,sep,false), ...
        vals, ...
        'UniformOutput', false ...
        );
      insideClasses = cellfun(@(c)strjoin(c,', '), insideClasses, 'UniformOutput',false);
      insideClasses = string(insideClasses);
      caClass{I} = cat(2, ...
        join(utilities.rep(caClass(I),nKeys),sep), ...
        join(insideClasses,'; ') ...
        );
      
      strNow = join( ...
        join( ...
          [ ...
            fields(:), ...
            valStrings(:) ...
          ], ...
          [' ',char(8594),' '], ...
          2 ...
        ), ...
        [sep,' '] ...
        );
    otherwise
      error('"%s" Cannot be dealt with currently.', caClass{I});
  end
  strRepresentation{I} = char(strNow);
end
% join all the strings using the input sep.
if uniquify
  strRepresentation = unique(strRepresentation,'stable');
end
outputString = strjoin(strRepresentation,[sep,' ']);
if nargout > 1
  varargout{1} = caClass;
end
end
