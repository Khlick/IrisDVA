function addTooltip(hUI,tipString, direction, attrName, verbose)
%ADDTOOLTIP Add a tooltip to ui elements.
%   This utility will add the given tipString to the ui element on a UIFigure.
%   You need to supply the attribute name for the tooltip, typically
%   'customtooltip'.
if nargin < 5, verbose = false; end
if nargin < 4, attrName = 'customtooltip'; end
% tooltip direction
if nargin < 3, direction = 'up'; end

validDir = @(d)validatestring(d, {'up','down','left','right'});
direction = validDir(direction);

if ~exist('mlapptools', 'file')
  error([...
    'addTooltip() requires mlapptools. ', ...
    'see "https://github.com/StackOverflowMATLABchat/mlapptools"' ...
    ]);
end

% get the ID of the label element
[w,elemID] = mlapptools.getWebElements(hUI);

% check if unmask function exists, otherwise insert it.
if ~strcmpi(w.executeJS('typeof makeVisible !== ''undefined'' '),'true')
  % makeVisible function does not exist, let's add it
  w.executeJS( ...
    [ ...
      'const makeVisible = function(nodeID, recurse=true) {', ...
        'dojo.setStyle(nodeID, "overflow", "visible");', ...
        'if(recurse) {', ...
        '  let children = nodeID.getElementsByTagName("*");', ...
        '  let arr = [ ...children];', ...
        '  arr.forEach( (ch) => dojo.setStyle(ch,"overflow", "visible") );', ...
        '}', ...
      '}' ...
    ] ...
    );
end

%hUI.Type is ok too.
nodeType = regexp(class(hUI), '(?<=\.)\w*$', 'match', 'once');

% create a flag that skips recursive unmasking.
recurseVals = {'false', 'true'};
recurse = true;

% set up elem in DOM
w.executeJS('if(typeof elem !== ''undefined''){ var elem, parent; } ');

switch nodeType
  case {'Button','DropDown'}
    %apply class to container, set parent, self, children: overflow:
    %visible
    elemNodeString = sprintf( ...
      'dojo.query("[%s = ''%s'']")[0]', ...
      elemID.ID_attr,elemID.ID_val);
    parentNodeString = 'elem.parentNode';
    
  case 'Label'
    %apply class to _label span element, i.e. only the actual label text.
    %then select the container node and set descendeents overflow: visable
    elemNodeString = sprintf( ...
      'dojo.query("[%s = ''%s'']")[0].firstChild', ...
      elemID.ID_attr,[elemID.ID_val,'_label'] ...
      ); % firstChild is span
    
    parentNodeString = sprintf( ...
      'dojo.query("[%s = ''%s'']")[0].parentNode', ...
      elemID.ID_attr,elemID.ID_val);
    
  case {'ToggleSwitch','Switch','RockerSwitch','CheckBox'}
    % for now, add to the elem.firstChild the div: 'vc-SvgContainer'
    % (data-tag=#) and unmask it. i.e. the switch
    % elemID points to parent node of the switches, in order to preserve
    % the function flow, we need to 
    % TODO: allow tooltips for spans: 'OnLabel', 'OffLabel' and svg, inside
    
    elemNodeString = sprintf( ...
      'dojo.query("[%s = ''%s'']")[0].firstChild', ...
      elemID.ID_attr,elemID.ID_val ...
      );
    
    if ~strcmpi(nodeType,'checkbox')
      parentNodeString = 'elem.parentNode';
      recurse = false;
    else
      parentNodeString = 'elem.parentNode.parentNode';
    end
    
  otherwise
    % for now, let's throw a warning and then use the button method. We
    % will probably want to study more cases here...
    
    elemNodeString = sprintf( ...
      'dojo.query("[%s = ''%s'']")[0]', ...
      elemID.ID_attr,elemID.ID_val);
    
    parentNodeString = 'elem.ParentNode';
    
end


% Create JS call to add the tooltip attribute to desired node
tooltipJS = sprintf( ...
  ['elem = dojo.attr(%s, "%s", `%s`);', ...
  'dojo.attr(elem, "flow", "%s");', ...
  'makeVisible(elem,recurse=false);', ...
  'parent = %s;', ...
  'makeVisible(parent,recurse=%s);'], ...
  elemNodeString, ...
  attrName, ...
  tipString, ...
  direction, ...
  parentNodeString, ...
  recurseVals{recurse+1} ...
  );

% run the javascript on the DOM
% executeJS will throw an appropriate error, sort of, if syntax is wrong or
% whatever.
w.executeJS(tooltipJS);
if verbose
  % perform check for tooltip css
  checkStr = sprintf( ...
    [ ...
      'if(typeof rularr === ''undefined''){var rulearr;};', ...
      'rularr = [ ...document.styleSheets[document.styleSheets.length-1].rules];', ...
      'rularr.filter( (r) => typeof r.selectorText === "string"? ', ...
      'r.selectorText.search(''%s'') > -1 : false  ).length' ...
    ], ...
    attrName ...
    );

  if ~str2double(w.executeJS(checkStr))
    warning( ...
      [ ...
        'Tooltip added successfully. But ',...
        '"%s" CSS selector definition not found. ', ...
        'Tooltip will not display until the CSS definition exists.' ...
      ], ...
      attrName ...
      );
  end
end



end

